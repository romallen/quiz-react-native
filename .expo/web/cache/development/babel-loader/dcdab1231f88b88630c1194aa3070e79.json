{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as audio from \"./audio\";\nimport image from \"../assets/img/react.svg\";\nimport { React, useState, createRef } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { Button, Overlay } from \"react-native-elements\";\nimport QuestionOverlay from \"../components/questionOverlay\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Card(props) {\n  var _useState = useState({\n    view: 'points',\n    completed: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cardState = _useState2[0],\n      setCardState = _useState2[1];\n\n  var cardRef = createRef(null);\n\n  var _useWindowDimensions = useWindowDimensions(),\n      height = _useWindowDimensions.height,\n      width = _useWindowDimensions.width;\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      visible = _useState4[0],\n      setVisible = _useState4[1];\n\n  var animation = new Animated.Value(0);\n  var inputRange = [0, 1];\n  var outputRange = [1, 0];\n  var scale = animation.interpolate({\n    inputRange: inputRange,\n    outputRange: outputRange\n  });\n\n  var handleClick = function handleClick() {\n    console.log(\"card Pressed\", cardState.completed);\n\n    if (!cardState.completed) {\n      Animated.timing(animation, {\n        toValue: 1,\n        duration: 500,\n        easing: Easing.ease,\n        useNativeDriver: true\n      }).start();\n      cardState.completed = true;\n      props.setVisible;\n      setVisible(!visible);\n      props.setCardOverlay({\n        isVisible: true,\n        question: props.question,\n        answer: props.answer\n      });\n    }\n  };\n\n  var getLabelBack = function getLabelBack() {\n    var label = cardState.view === 'question' ? _jsx(Text, {\n      children: props.question\n    }) : _jsx(Text, {\n      children: props.answer\n    });\n    return label;\n  };\n\n  var transitionEndHandler = function transitionEndHandler(e) {\n    if (e.propertyName === 'width') {\n      cardState.flipping = false;\n    }\n  };\n\n  var styles = {\n    width: props.width,\n    height: props.height,\n    transform: []\n  };\n\n  var handleCorrectPress = function handleCorrectPress() {\n    console.log(\"CORRECT\");\n    props.setVisible(false);\n  };\n\n  var handleIncorrectPress = function handleIncorrectPress() {\n    console.log(\"INCORRECT\");\n    props.setVisible(false);\n  };\n\n  var front = cardState.completed ? _jsx(\"img\", {\n    src: image\n  }) : _jsx(Text, {\n    adjustsFontSizeToFit: true,\n    numberOfLines: 1,\n    style: {\n      fontSize: 35,\n      textAlignVertical: 'center',\n      textAlign: 'center'\n    },\n    nativeIDs: \"points\",\n    children: props.points\n  });\n  var className = 'flipper';\n\n  if (cardState.view !== 'points') {\n    className = className + ' flipped';\n  }\n\n  if (cardState.flipping) {\n    className = className + ' flipping';\n  }\n\n  return _jsxs(TouchableOpacity, {\n    ref: cardRef,\n    disabled: cardState.completed,\n    ref: function ref(card) {\n      return cardRef.current = card;\n    },\n    style: {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      height: props.height\n    },\n    nativeID: \"card\",\n    onPress: handleClick,\n    children: [_jsx(Animated.View, {\n      style: [styles.button, styles, {\n        transform: [{\n          scale: scale\n        }]\n      }],\n      children: front\n    }), _jsxs(Overlay, {\n      ModalComponent: Modal,\n      isVisible: visible,\n      onBackdropPress: handleClick,\n      children: [_jsx(QuestionOverlay, {\n        style: styles.overlay,\n        question: props.question,\n        answer: props.answer,\n        width: \"90%\"\n      }), _jsx(Button, {\n        style: styles.button,\n        onPress: handleIncorrectPress,\n        title: \"INCORRECT\",\n        color: \"#841584\",\n        accessibilityLabel: \"Setup the game!\"\n      }), _jsx(Button, {\n        style: styles.button,\n        onPress: handleCorrectPress,\n        title: \"CORRECT\",\n        color: \"#841584\",\n        accessibilityLabel: \"Get, delete, edit and create questions\"\n      })]\n    })]\n  }, props.keys);\n}","map":{"version":3,"sources":["/Users/romaineallen/codeC/ccp2/projects/quiz-react-native/app/components/Cards.js"],"names":["audio","image","React","useState","createRef","Button","Overlay","QuestionOverlay","Card","props","view","completed","cardState","setCardState","cardRef","useWindowDimensions","height","width","visible","setVisible","animation","Animated","Value","inputRange","outputRange","scale","interpolate","handleClick","console","log","timing","toValue","duration","easing","Easing","ease","useNativeDriver","start","setCardOverlay","isVisible","question","answer","getLabelBack","label","transitionEndHandler","e","propertyName","flipping","styles","transform","handleCorrectPress","handleIncorrectPress","front","fontSize","textAlignVertical","textAlign","points","className","card","current","justifyContent","alignItems","button","Modal","overlay","keys"],"mappings":"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","sourcesContent":["import * as audio from './audio';\nimport image from \"../assets/img/react.svg\"\nimport {React, useState, createRef} from \"react\";\nimport { Animated, Easing, Modal, StatusBar, StyleSheet, Text, TouchableOpacity, View, useWindowDimensions  } from \"react-native\";\nimport { Button, Overlay } from \"react-native-elements\";\nimport QuestionOverlay from '../components/questionOverlay';\n\nexport default function Card(props) {\n    const [cardState, setCardState] = useState({view: 'points', completed: false})\n    const cardRef = createRef(null)\n    const { height, width } = useWindowDimensions();\n    const [visible, setVisible] = useState(false);\n\n    const animation = new Animated.Value(0);\n    const inputRange = [0, 1];\n    const outputRange = [1, 0];\n    const scale = animation.interpolate({inputRange, outputRange});\n\n    const handleClick= () => {\n        console.log(\"card Pressed\", cardState.completed );\n        if(!cardState.completed ) {\n            Animated.timing(animation, {\n                toValue: 1,\n                duration: 500,\n                easing: Easing.ease,\n                useNativeDriver: true,\n              }).start();\n              cardState.completed =true\n              props.setVisible\n              setVisible(!visible);\n              props.setCardOverlay({isVisible: true, question: props.question, answer: props.answer})\n        }\n       \n        //  props.setCurrentView(\"QuestionCardScreen\");\n        // if (cardState.view === 'points') {\n        //     audio.play(\"flip\");\n        //     setTimeout(() => {\n        //         if (cardState.view === \"question\") {\n        //             audio.play(\"countdown\");\n        //         }\n        //     }, 1800);\n        //     cardState.view = 'question'\n        //     cardState.flipping = true\n        //     // setCardState({view: 'question', flipping: true});\n        // } \n        // else if (cardState.view === 'question') {\n        //     audio.stop(\"countdown\");\n        //     cardState.view = 'answer'\n        //     // setCardState({view: 'answer'});\n        // } else {\n        //     audio.play(\"flipBack\");\n        //     cardState.view = 'points'\n        //     cardState.flipping = true\n        //     cardState.completed =true\n        //     // setCardState({view: 'points', completed: true, flipping: true});\n        //  }\n    };\n\n    let getLabelBack = () => {\n        let label = cardState.view === 'question' ? <Text>{props.question}</Text> : <Text>{props.answer}</Text>\n        return label;\n    }\n\n    let transitionEndHandler = (e) => {\n        if (e.propertyName === 'width') {\n            cardState.flipping = false\n            // setCardState({flipping: false});\n        }\n    }\n    //console.log(props)\n    let styles = {width: props.width, \n                height: props.height, \n                transform: [\n                    // {\n                    //     translateX: animation.interpolate({\n                    //         inputRange: [0, 1],\n                    //         outputRange: [0, 120]\n                    //     })\n                    // },\n                    // {\n                    //     translateY: animation.interpolate({\n                    //         inputRange: [0, 1],\n                    //         outputRange: [0, 25]\n                    //     })\n                    // },\n                    // {\n                    //     scaleX: animation.interpolate({\n                    //         inputRange: [0, 1],\n                    //         outputRange: [1, 150]\n                    //     })\n                    // },\n                    // {\n                    //     scaleY: animation.interpolate({\n                    //         inputRange: [0, 1],\n                    //         outputRange: [1, 120.5]\n                    //     })\n                    // }\n                ]\n            }\n  \n            const handleCorrectPress = () => {\n                console.log(\"CORRECT\");\n                props.setVisible(false);\n              };\n              const handleIncorrectPress = () => {\n                console.log(\"INCORRECT\");\n                props.setVisible(false);\n              };\n\n        let front = cardState.completed ? <img src={image}/> : <Text adjustsFontSizeToFit={true} numberOfLines={1}  style= {{fontSize: 35, textAlignVertical: 'center', textAlign:'center'}} nativeIDs='points'>{props.points}</Text>;\n        let className = 'flipper';\n\n        if (cardState.view !== 'points') {\n            className = className + ' flipped';\n        }\n        if (cardState.flipping) {\n            className = className + ' flipping';\n        }\n        //\n        return (\n            <TouchableOpacity ref={cardRef} disabled={cardState.completed} ref={card => (cardRef.current = card)} style= {{justifyContent: \"center\",alignItems: \"center\", height: props.height}}   nativeID='card' key={props.keys} onPress={handleClick}>\n                <Animated.View style={[styles.button, styles, {transform: [{scale}]}]}>\n                {/* <View >\n                        <View nativeID='front'> */}\n                        {front}\n                        {/* </View>\n                    <View nativeID='back'>\n                        {getLabelBack}\n                            <img src={image}/>\n                        </View>\n                    </View> */}\n                </Animated.View>\n\n                <Overlay ModalComponent={Modal} isVisible={visible} onBackdropPress={handleClick}>\n                <QuestionOverlay style={styles.overlay} question = {props.question} answer = {props.answer} width={\"90%\"}/>\n                <Button\n        style={styles.button}\n        onPress={handleIncorrectPress}\n        title=\"INCORRECT\"\n        color=\"#841584\"\n        accessibilityLabel=\"Setup the game!\"\n      />\n\n      <Button\n        style={styles.button}\n        onPress={handleCorrectPress}\n        title=\"CORRECT\"\n        color=\"#841584\"\n        accessibilityLabel=\"Get, delete, edit and create questions\"\n      />\n            </Overlay>\n            </TouchableOpacity>\n        );\n    }\n\n\n    // const styles = StyleSheet.create({ \n    //     container: {\n    //         flex:1,\n    //     width: props.width ,\n    //     height: props.height,\n    //     transform: 'translate3d(' + props.left + 'px,' + props.top + 'px,0)',\n    //     WebkitTransform: 'translate3d(' + props.left + 'px,' + props.top + 'px,0)'\n    // }});"]},"metadata":{},"sourceType":"module"}