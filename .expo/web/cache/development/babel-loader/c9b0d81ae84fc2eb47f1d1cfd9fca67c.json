{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Card from \"../components/card\";\nimport { useState } from \"react\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { Button } from \"react-native-elements\";\nimport { SectionGrid } from 'react-native-super-grid';\nimport { data } from \"../data\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function PlayScreen(props) {\n  var _useWindowDimensions = useWindowDimensions(),\n      height = _useWindowDimensions.height,\n      width = _useWindowDimensions.width;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSelected = _useState2[0],\n      setSelection = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      questions = _useState4[0],\n      setQuestions = _useState4[1];\n\n  var _useState5 = useState([{\n    title: \"React 101\",\n    data: [{\n      \"points\": 100,\n      \"question\": \"<p>What part of your application does React focus on?</p><ol><li>The Model</li><li>The View</li><li>The Controller</li><li>All of the above</li></ol>\",\n      \"answer\": \"B. The View\"\n    }, {\n      \"points\": 200,\n      \"question\": \"_____ lets you create JavaScript objects using HTML syntax\",\n      \"answer\": \"JSX\"\n    }, {\n      \"points\": 300,\n      \"question\": \"What tool can you use to transpile JSX?\",\n      \"answer\": \"Babel\"\n    }, {\n      \"points\": 400,\n      \"question\": \"React uses a _____________ to limit direct manipulation of the DOM and improve performance\",\n      \"answer\": \"Virtual DOM\"\n    }]\n  }]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      data = _useState6[0],\n      setData = _useState6[1];\n\n  console.log(\"This is the Game\", data);\n\n  var handleBackPress = function handleBackPress() {\n    console.log(\"Go to Welcome\");\n    props.setCurrentView(\"WelcomeScreen\");\n  };\n\n  var handleStartGamePress = function handleStartGamePress() {\n    console.log(\"Start the Game\");\n    props.setGameSettings({\n      categories: isSelected.map(function (sel) {\n        return sel.value;\n      })\n    });\n    props.setCurrentView(\"PlayGame\");\n  };\n\n  var cards = data.map(function (element) {\n    _jsx(SectionList, {\n      sections: element,\n      keyExtractor: function keyExtractor(item, index) {\n        return item + index;\n      },\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(Card, {\n          question: item[\"questions\"][\"question\"],\n          answer: item[\"questions\"][\"answer\"],\n          points: item[\"questions\"][\"points\"]\n        });\n      },\n      renderSectionHeader: function renderSectionHeader(_ref2) {\n        var category = _ref2.section.category;\n        return _jsx(Text, {\n          style: styles.header,\n          children: category\n        });\n      }\n    });\n  });\n\n  var Item = function Item(_ref3) {\n    var item = _ref3.item;\n    return _jsx(View, {\n      style: styles.item,\n      children: _jsx(Card, {\n        question: item.questions.question,\n        answer: item.questions.answer,\n        points: item.questions.points\n      })\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Play Game!!!\"\n    }), _jsx(SectionList, {\n      sections: data,\n      keyExtractor: function keyExtractor(item, index) {\n        return item + index;\n      },\n      renderItem: function renderItem(_ref4) {\n        var item = _ref4.item;\n        return _jsx(Item, {\n          item: item\n        });\n      },\n      renderSectionHeader: function renderSectionHeader(_ref5) {\n        var title = _ref5.section.title;\n        return _jsx(Text, {\n          style: styles.header,\n          children: title\n        });\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {},\n  title: {\n    fontSize: 60,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  button: {\n    fontSize: 40,\n    paddingBottom: 20,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  header: {\n    fontSize: 30,\n    color: \"#FFF\",\n    marginTop: 10,\n    padding: 2,\n    backgroundColor: \"#C2185B\",\n    textAlign: \"center\"\n  },\n  row: {\n    marginHorizontal: 15,\n    marginTop: 10,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    paddingHorizontal: 2\n  },\n  rowText: {\n    fontSize: 18\n  }\n});","map":{"version":3,"sources":["/Users/romaineallen/codeC/ccp2/projects/quiz-react-native/app/screens/playScreen.js"],"names":["Card","useState","Button","SectionGrid","data","PlayScreen","props","useWindowDimensions","height","width","isSelected","setSelection","questions","setQuestions","title","setData","console","log","handleBackPress","setCurrentView","handleStartGamePress","setGameSettings","categories","map","sel","value","cards","element","item","index","category","section","styles","header","Item","question","answer","points","container","StyleSheet","create","fontSize","alignItems","justifyContent","button","paddingBottom","color","marginTop","padding","backgroundColor","textAlign","row","marginHorizontal","flexDirection","paddingHorizontal","rowText"],"mappings":";AACA,OAAOA,IAAP;AACA,SAAQC,QAAR,QAAuB,OAAvB;;;;;;;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAAQC,IAAR;;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACtC,6BAA0BC,mBAAmB,EAA7C;AAAA,MAAQC,MAAR,wBAAQA,MAAR;AAAA,MAAgBC,KAAhB,wBAAgBA,KAAhB;;AACA,kBAAmCR,QAAQ,CAAC,EAAD,CAA3C;AAAA;AAAA,MAAOS,UAAP;AAAA,MAAmBC,YAAnB;;AACA,mBAAkCV,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOW,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAwBZ,QAAQ,CAAC,CAC/B;AACEa,IAAAA,KAAK,EAAE,WADT;AAEEV,IAAAA,IAAI,EAAE,CACJ;AACE,gBAAU,GADZ;AAEE,kBAAY,uJAFd;AAGE,gBAAU;AAHZ,KADI,EAMJ;AACE,gBAAU,GADZ;AAEE,kBAAY,4DAFd;AAGE,gBAAU;AAHZ,KANI,EAWJ;AACE,gBAAU,GADZ;AAEE,kBAAY,yCAFd;AAGE,gBAAU;AAHZ,KAXI,EAgBJ;AACE,gBAAU,GADZ;AAEE,kBAAY,4FAFd;AAGE,gBAAU;AAHZ,KAhBI;AAFR,GAD+B,CAAD,CAAhC;AAAA;AAAA,MAAOA,IAAP;AAAA,MAAaW,OAAb;;AA6BAC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCb,IAAhC;;AAEA,MAAMc,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BF,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAX,IAAAA,KAAK,CAACa,cAAN,CAAqB,eAArB;AACD,GAHD;;AAIA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjCJ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAEAX,IAAAA,KAAK,CAACe,eAAN,CAAsB;AAAEC,MAAAA,UAAU,EAAEZ,UAAU,CAACa,GAAX,CAAe,UAACC,GAAD;AAAA,eAASA,GAAG,CAACC,KAAb;AAAA,OAAf;AAAd,KAAtB;AACAnB,IAAAA,KAAK,CAACa,cAAN,CAAqB,UAArB;AACD,GALD;;AAOA,MAAIO,KAAK,GAAEtB,IAAI,CAACmB,GAAL,CAAS,UAAAI,OAAO,EAAI;AAC7B,SAAC,WAAD;AACA,MAAA,QAAQ,EAAEA,OADV;AAEA,MAAA,YAAY,EAAE,sBAACC,IAAD,EAAOC,KAAP;AAAA,eAAiBD,IAAI,GAAGC,KAAxB;AAAA,OAFd;AAGA,MAAA,UAAU,EAAE;AAAA,YAAGD,IAAH,QAAGA,IAAH;AAAA,eACR,KAAC,IAAD;AAAM,UAAA,QAAQ,EAAEA,IAAI,CAAC,WAAD,CAAJ,CAAkB,UAAlB,CAAhB;AACA,UAAA,MAAM,EAAEA,IAAI,CAAC,WAAD,CAAJ,CAAkB,QAAlB,CADR;AAEA,UAAA,MAAM,EAAEA,IAAI,CAAC,WAAD,CAAJ,CAAkB,QAAlB;AAFR,UADQ;AAAA,OAHZ;AASA,MAAA,mBAAmB,EAAE;AAAA,YAAcE,QAAd,SAAGC,OAAH,CAAcD,QAAd;AAAA,eACnB,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEE,MAAM,CAACC,MAApB;AAAA,oBAA6BH;AAA7B,UADmB;AAAA;AATrB;AAaF,GAdW,CAAX;;AAeD,MAAMI,IAAI,GAAG,SAAPA,IAAO;AAAA,QAAGN,IAAH,SAAGA,IAAH;AAAA,WACZ,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEI,MAAM,CAACJ,IAApB;AAAA,gBACG,KAAC,IAAD;AAAM,QAAA,QAAQ,EAAEA,IAAI,CAAChB,SAAL,CAAeuB,QAA/B;AACG,QAAA,MAAM,EAAEP,IAAI,CAAChB,SAAL,CAAewB,MAD1B;AAEG,QAAA,MAAM,EAAER,IAAI,CAAChB,SAAL,CAAeyB;AAF1B;AADH,MADY;AAAA,GAAb;;AASC,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACM,SAApB;AAAA,eACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEN,MAAM,CAAClB,KAApB;AAAA;AAAA,MADF,EAGE,KAAC,WAAD;AACF,MAAA,QAAQ,EAAEV,IADR;AAEF,MAAA,YAAY,EAAE,sBAACwB,IAAD,EAAOC,KAAP;AAAA,eAAiBD,IAAI,GAAGC,KAAxB;AAAA,OAFZ;AAGF,MAAA,UAAU,EAAE;AAAA,YAAGD,IAAH,SAAGA,IAAH;AAAA,eACV,KAAC,IAAD;AAAM,UAAA,IAAI,EAAEA;AAAZ,UADU;AAAA,OAHV;AAMF,MAAA,mBAAmB,EAAE;AAAA,YAAcd,KAAd,SAAGiB,OAAH,CAAcjB,KAAd;AAAA,eACnB,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEkB,MAAM,CAACC,MAApB;AAAA,oBAA6BnB;AAA7B,UADmB;AAAA;AANnB,MAHF;AAAA,IADF;AAiCD;AAGD,IAAMkB,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE,EADoB;AAK/BxB,EAAAA,KAAK,EAAE;AACL2B,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE,QAFP;AAGLC,IAAAA,cAAc,EAAE;AAHX,GALwB;AAU/BC,EAAAA,MAAM,EAAE;AACNH,IAAAA,QAAQ,EAAE,EADJ;AAENI,IAAAA,aAAa,EAAE,EAFT;AAGLH,IAAAA,UAAU,EAAE,QAHP;AAINC,IAAAA,cAAc,EAAE;AAJV,GAVuB;AAgB/BV,EAAAA,MAAM,EAAE;AACNQ,IAAAA,QAAQ,EAAE,EADJ;AAENK,IAAAA,KAAK,EAAE,MAFD;AAGNC,IAAAA,SAAS,EAAE,EAHL;AAINC,IAAAA,OAAO,EAAE,CAJH;AAKNC,IAAAA,eAAe,EAAE,SALX;AAMNC,IAAAA,SAAS,EAAE;AANL,GAhBuB;AAwB/BC,EAAAA,GAAG,EAAE;AACHC,IAAAA,gBAAgB,EAAE,EADf;AAEHL,IAAAA,SAAS,EAAE,EAFR;AAGHM,IAAAA,aAAa,EAAE,KAHZ;AAIHV,IAAAA,cAAc,EAAE,eAJb;AAKHD,IAAAA,UAAU,EAAE,QALT;AAMHY,IAAAA,iBAAiB,EAAE;AANhB,GAxB0B;AAgC/BC,EAAAA,OAAO,EAAE;AACPd,IAAAA,QAAQ,EAAE;AADH;AAhCsB,CAAlB,CAAf","sourcesContent":["\nimport Card from \"../components/card\"\nimport {useState} from \"react\";\nimport { SectionList, StatusBar, StyleSheet, Text, View,useWindowDimensions } from \"react-native\";\nimport { Button } from \"react-native-elements\";\nimport { SectionGrid } from 'react-native-super-grid';\nimport {data} from '../data'\n\nexport default function PlayScreen(props) {\n    const { height, width } = useWindowDimensions();\n    const [isSelected, setSelection] = useState([]);\n    const [questions, setQuestions] = useState([])\n    const [data, setData] = useState([\n      {\n        title: \"React 101\",\n        data: [\n          {\n            \"points\": 100,\n            \"question\": \"<p>What part of your application does React focus on?</p><ol><li>The Model</li><li>The View</li><li>The Controller</li><li>All of the above</li></ol>\",\n            \"answer\": \"B. The View\"\n          },\n          {\n            \"points\": 200,\n            \"question\": \"_____ lets you create JavaScript objects using HTML syntax\",\n            \"answer\": \"JSX\"\n          },\n          {\n            \"points\": 300,\n            \"question\": \"What tool can you use to transpile JSX?\",\n            \"answer\": \"Babel\"\n          },\n          {\n            \"points\": 400,\n            \"question\": \"React uses a _____________ to limit direct manipulation of the DOM and improve performance\",\n            \"answer\": \"Virtual DOM\"\n          }\n        ]\n      }\n    ])\n  \n\n    console.log(\"This is the Game\", data );\n\n    const handleBackPress = () => {\n      console.log(\"Go to Welcome\");\n      props.setCurrentView(\"WelcomeScreen\");\n    };\n    const handleStartGamePress = () => {\n      console.log(\"Start the Game\");\n  \n      props.setGameSettings({ categories: isSelected.map((sel) => sel.value) });\n      props.setCurrentView(\"PlayGame\");\n    };\n\n    let cards =data.map(element => {\n      <SectionList\n      sections={element}\n      keyExtractor={(item, index) => item + index}\n      renderItem={({ item }) => (\n          <Card question={item[\"questions\"][\"question\"]} \n          answer={item[\"questions\"][\"answer\"]}\n          points={item[\"questions\"][\"points\"]}\n          />\n      )}\n      renderSectionHeader={({ section: { category } }) => (\n        <Text style={styles.header}>{category}</Text>\n      )}\n    />\n   })\n   const Item = ({ item }) => (\n    <View style={styles.item}>\n       <Card question={item.questions.question} \n          answer={item.questions.answer}\n          points={item.questions.points}\n          />\n    </View>\n  );\n\n    return (\n      <View style={styles.container}>\n        <Text style={styles.title}>Play Game!!!</Text>\n        {/* {cards} */}\n        <SectionList\n      sections={data}\n      keyExtractor={(item, index) => item + index}\n      renderItem={({ item }) => (\n        <Item item={item} />\n      )}\n      renderSectionHeader={({ section: { title } }) => (\n        <Text style={styles.header}>{title}</Text>\n      )}\n    />\n\n       {/* <Card question={\"question\"} answer={\"answer\"} points={\"100\"}/> */}\n   \n        {/* <Button\n          onPress={handleStartGamePress}\n          title=\"Start the Game\"\n          color=\"#841584\"\n          accessibilityLabel=\"Questions\"\n        />\n        <Button\n          onPress={handleBackPress}\n          title=\"RETURN TO HOME SCREEN\"\n          color=\"#841584\"\n          accessibilityLabel=\"GO BACK!\"\n        /> */}\n  \n      \n      </View>\n    );\n  }\n\n\n  const styles = StyleSheet.create({\n    container: {\n      // flex: 1,\n      //backgroundColor: \"#ddf\",\n    },\n    title: {\n      fontSize: 60,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    button: {\n      fontSize: 40,\n      paddingBottom: 20,\n       alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    header: {\n      fontSize: 30,\n      color: \"#FFF\",\n      marginTop: 10,\n      padding: 2,\n      backgroundColor: \"#C2185B\",\n      textAlign: \"center\",\n    },\n    row: {\n      marginHorizontal: 15,\n      marginTop: 10,\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      paddingHorizontal: 2,\n    },\n    rowText: {\n      fontSize: 18,\n    },\n  });"]},"metadata":{},"sourceType":"module"}