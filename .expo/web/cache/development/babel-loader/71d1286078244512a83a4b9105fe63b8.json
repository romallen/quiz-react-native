{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as audio from \"./audio\";\nimport image from \"../assets/img/react.svg\";\nimport { React, useState, createRef } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Card(props) {\n  var _useState = useState({\n    view: 'points',\n    completed: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cardState = _useState2[0],\n      setCardState = _useState2[1];\n\n  var cardRef = createRef(null);\n\n  var _useWindowDimensions = useWindowDimensions(),\n      height = _useWindowDimensions.height,\n      width = _useWindowDimensions.width;\n\n  var animation = new Animated.Value(0);\n  var inputRange = [0, 1];\n  var outputRange = [1, 0];\n  var scale = animation.interpolate({\n    inputRange: inputRange,\n    outputRange: outputRange\n  });\n\n  var handleClick = function handleClick() {\n    console.log(\"card Pressed\", cardState.completed);\n    Animated.timing(animation, {\n      toValue: 1,\n      duration: 500,\n      easing: Easing.ease,\n      useNativeDriver: true\n    }).start();\n    cardState.completed = true;\n  };\n\n  var getLabelBack = function getLabelBack() {\n    var label = cardState.view === 'question' ? _jsx(Text, {\n      children: props.question\n    }) : _jsx(Text, {\n      children: props.answer\n    });\n    return label;\n  };\n\n  var transitionEndHandler = function transitionEndHandler(e) {\n    if (e.propertyName === 'width') {\n      cardState.flipping = false;\n    }\n  };\n\n  var styles = {\n    width: props.width,\n    height: props.height,\n    transform: []\n  };\n  var front = cardState.completed ? _jsx(\"img\", {\n    src: image\n  }) : _jsx(Text, {\n    adjustsFontSizeToFit: true,\n    numberOfLines: 1,\n    style: {\n      fontSize: 35,\n      textAlignVertical: 'center',\n      textAlign: 'center'\n    },\n    nativeIDs: \"points\",\n    children: props.points\n  });\n  var className = 'flipper';\n\n  if (cardState.view !== 'points') {\n    className = className + ' flipped';\n  }\n\n  if (cardState.flipping) {\n    className = className + ' flipping';\n  }\n\n  return _jsx(TouchableOpacity, {\n    ref: cardRef,\n    disabled: cardState.completed,\n    style: {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      height: props.height\n    },\n    nativeID: \"card\",\n    onPress: handleClick,\n    children: _jsx(Animated.View, {\n      style: [styles.button, styles, {\n        transform: [{\n          scale: scale\n        }]\n      }],\n      children: front\n    })\n  }, props.keys);\n}","map":{"version":3,"sources":["/Users/romaineallen/codeC/ccp2/projects/quiz-react-native/app/components/Cards.js"],"names":["audio","image","React","useState","createRef","Card","props","view","completed","cardState","setCardState","cardRef","useWindowDimensions","height","width","animation","Animated","Value","inputRange","outputRange","scale","interpolate","handleClick","console","log","timing","toValue","duration","easing","Easing","ease","useNativeDriver","start","getLabelBack","label","question","answer","transitionEndHandler","e","propertyName","flipping","styles","transform","front","fontSize","textAlignVertical","textAlign","points","className","justifyContent","alignItems","button","keys"],"mappings":"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","sourcesContent":["import * as audio from './audio';\nimport image from \"../assets/img/react.svg\"\nimport {React, useState, createRef} from \"react\";\nimport { Animated, Easing, StatusBar, StyleSheet, Text, TouchableOpacity, View, useWindowDimensions  } from \"react-native\";\n\n\nexport default function Card(props) {\n    const [cardState, setCardState] = useState({view: 'points', completed: false})\n    const cardRef = createRef(null)\n    const { height, width } = useWindowDimensions();\n    const animation = new Animated.Value(0);\n    const inputRange = [0, 1];\n    const outputRange = [1, 0];\n    const scale = animation.interpolate({inputRange, outputRange});\n\n    const handleClick= () => {\n        console.log(\"card Pressed\", cardState.completed );\n\n        Animated.timing(animation, {\n            toValue: 1,\n            duration: 500,\n            easing: Easing.ease,\n            useNativeDriver: true,\n          }).start();\n          cardState.completed =true\n        // if (cardState.view === 'points') {\n        //     audio.play(\"flip\");\n        //     setTimeout(() => {\n        //         if (cardState.view === \"question\") {\n        //             audio.play(\"countdown\");\n        //         }\n        //     }, 1800);\n        //     cardState.view = 'question'\n        //     cardState.flipping = true\n        //     // setCardState({view: 'question', flipping: true});\n        // } \n        // else if (cardState.view === 'question') {\n        //     audio.stop(\"countdown\");\n        //     cardState.view = 'answer'\n        //     // setCardState({view: 'answer'});\n        // } else {\n        //     audio.play(\"flipBack\");\n        //     cardState.view = 'points'\n        //     cardState.flipping = true\n        //     cardState.completed =true\n        //     // setCardState({view: 'points', completed: true, flipping: true});\n        //  }\n    };\n\n    let getLabelBack = () => {\n        let label = cardState.view === 'question' ? <Text>{props.question}</Text> : <Text>{props.answer}</Text>\n        return label;\n    }\n\n    let transitionEndHandler = (e) => {\n        if (e.propertyName === 'width') {\n            cardState.flipping = false\n            // setCardState({flipping: false});\n        }\n    }\n    //console.log(props)\n    let styles = {width: props.width, \n                height: props.height, \n                transform: [\n                    // {\n                    //     translateX: animation.interpolate({\n                    //         inputRange: [0, 1],\n                    //         outputRange: [0, 120]\n                    //     })\n                    // },\n                    // {\n                    //     translateY: animation.interpolate({\n                    //         inputRange: [0, 1],\n                    //         outputRange: [0, 25]\n                    //     })\n                    // },\n                    // {\n                    //     scaleX: animation.interpolate({\n                    //         inputRange: [0, 1],\n                    //         outputRange: [1, 150]\n                    //     })\n                    // },\n                    // {\n                    //     scaleY: animation.interpolate({\n                    //         inputRange: [0, 1],\n                    //         outputRange: [1, 120.5]\n                    //     })\n                    // }\n                ]\n            }\n  \n     \n\n        let front = cardState.completed ? <img src={image}/> : <Text adjustsFontSizeToFit={true} numberOfLines={1}  style= {{fontSize: 35, textAlignVertical: 'center', textAlign:'center'}} nativeIDs='points'>{props.points}</Text>;\n        let className = 'flipper';\n\n        if (cardState.view !== 'points') {\n            className = className + ' flipped';\n        }\n        if (cardState.flipping) {\n            className = className + ' flipping';\n        }\n        //\n        return (\n            <TouchableOpacity ref={cardRef} disabled={cardState.completed} style= {{justifyContent: \"center\",alignItems: \"center\", height: props.height}}   nativeID='card' key={props.keys} onPress={handleClick}>\n                <Animated.View style={[styles.button, styles, {transform: [{scale}]}]}>\n                {/* <View >\n                        <View nativeID='front'> */}\n                        {front}\n                        {/* </View>\n                    <View nativeID='back'>\n                        {getLabelBack}\n                            <img src={image}/>\n                        </View>\n                    </View> */}\n                </Animated.View>\n            </TouchableOpacity>\n        );\n    }\n\n\n    // const styles = StyleSheet.create({ \n    //     container: {\n    //         flex:1,\n    //     width: props.width ,\n    //     height: props.height,\n    //     transform: 'translate3d(' + props.left + 'px,' + props.top + 'px,0)',\n    //     WebkitTransform: 'translate3d(' + props.left + 'px,' + props.top + 'px,0)'\n    // }});"]},"metadata":{},"sourceType":"module"}