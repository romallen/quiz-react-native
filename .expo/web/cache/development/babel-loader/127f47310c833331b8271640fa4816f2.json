{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as audio from \"./audio\";\nimport image from \"../assets/img/react.svg\";\nimport { React, useState, createRef } from \"react\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Card(props) {\n  var _useState = useState({\n    view: 'points',\n    completed: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cardState = _useState2[0],\n      setCardState = _useState2[1];\n\n  var cardRef = createRef(null);\n\n  var _useWindowDimensions = useWindowDimensions(),\n      height = _useWindowDimensions.height,\n      width = _useWindowDimensions.width;\n\n  var handleClick = function handleClick() {\n    console.log(\"card Pressed\");\n\n    if (cardState.view === 'points') {\n      audio.play(\"flip\");\n      setTimeout(function () {\n        if (cardState.view === \"question\") {\n          audio.play(\"countdown\");\n        }\n      }, 1800);\n      cardState.view = 'question';\n      cardState.flipping = true;\n    } else if (cardState.view === 'question') {\n      audio.stop(\"countdown\");\n      cardState.view = 'answer';\n    } else {\n      audio.play(\"flipBack\");\n      cardState.view = 'points';\n      cardState.flipping = true;\n      cardState.completed = true;\n    }\n  };\n\n  var getLabelBack = function getLabelBack() {\n    var label = cardState.view === 'question' ? _jsx(Text, {\n      children: props.question\n    }) : _jsx(Text, {\n      children: props.answer\n    });\n    return label;\n  };\n\n  var transitionEndHandler = function transitionEndHandler(e) {\n    if (e.propertyName === 'width') {\n      cardState.flipping = false;\n    }\n  };\n\n  var style = {\n    width: props.width,\n    height: props.height,\n    transform: [{\n      translateX: props.left\n    }, {\n      translateY: props.top\n    }]\n  };\n  var front = cardState.completed ? _jsx(\"img\", {\n    src: image\n  }) : _jsx(Text, {\n    style: {\n      fontSize: 150\n    },\n    className: \"points\",\n    children: props.points\n  });\n  var className = 'flipper';\n\n  if (cardState.view !== 'points') {\n    className = className + ' flipped';\n  }\n\n  if (cardState.flipping) {\n    className = className + ' flipping';\n  }\n\n  return _jsx(TouchableOpacity, {\n    style: {\n      width: props.width,\n      height: props.height\n    },\n    className: className,\n    onPress: handleClick(),\n    children: _jsxs(\"div\", {\n      className: \"card\",\n      children: [_jsx(View, {\n        className: \"front\",\n        children: front\n      }), _jsxs(View, {\n        className: \"back\",\n        children: [getLabelBack, _jsx(\"img\", {\n          src: image\n        })]\n      })]\n    })\n  });\n}","map":{"version":3,"sources":["/Users/romaineallen/codeC/ccp2/projects/quiz-react-native/app/components/Cards.js"],"names":["audio","image","React","useState","createRef","Card","props","view","completed","cardState","setCardState","cardRef","useWindowDimensions","height","width","handleClick","console","log","play","setTimeout","flipping","stop","getLabelBack","label","question","answer","transitionEndHandler","e","propertyName","style","transform","translateX","left","translateY","top","front","fontSize","points","className"],"mappings":"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","sourcesContent":["import * as audio from './audio';\nimport image from \"../assets/img/react.svg\"\nimport {React, useState, createRef} from \"react\";\nimport { StatusBar, StyleSheet, Text, TouchableOpacity, View, useWindowDimensions  } from \"react-native\";\nexport default function Card(props) {\n    const [cardState, setCardState] = useState({view: 'points', completed: false})\n    const cardRef = createRef(null)\n    const { height, width } = useWindowDimensions();\n    \n    const handleClick= () => {\n        console.log(\"card Pressed\");\n   \n        if (cardState.view === 'points') {\n            audio.play(\"flip\");\n            setTimeout(() => {\n                if (cardState.view === \"question\") {\n                    audio.play(\"countdown\");\n                }\n            }, 1800);\n            cardState.view = 'question'\n            cardState.flipping = true\n            // setCardState({view: 'question', flipping: true});\n        } \n        else if (cardState.view === 'question') {\n            audio.stop(\"countdown\");\n            cardState.view = 'answer'\n            // setCardState({view: 'answer'});\n        } else {\n            audio.play(\"flipBack\");\n            cardState.view = 'points'\n            cardState.flipping = true\n            cardState.completed =true\n            // setCardState({view: 'points', completed: true, flipping: true});\n        }\n    };\n\n    let getLabelBack = () => {\n        let label = cardState.view === 'question' ? <Text>{props.question}</Text> : <Text>{props.answer}</Text>\n        return label;\n    }\n\n    let transitionEndHandler = (e) => {\n        if (e.propertyName === 'width') {\n            cardState.flipping = false\n            // setCardState({flipping: false});\n        }\n    }\n let style = {width: props.width, \n                height: props.height, \n    transform:[{translateX:props.left}, {translateY:props.top}]}\n  \n     \n\n        let front = cardState.completed ? <img src={image}/> : <Text style= {{fontSize: 150}} className='points'>{props.points}</Text>;\n        let className = 'flipper';\n\n        if (cardState.view !== 'points') {\n            className = className + ' flipped';\n        }\n        if (cardState.flipping) {\n            className = className + ' flipping';\n        }\n        return (\n            <TouchableOpacity style={{width: props.width, \n                height: props.height}} className={className} onPress={handleClick()}>\n                <div className='card'>\n                    <View className='front'>\n                    {front}\n                    </View>\n                    <View className='back'>\n                        {getLabelBack}\n                        <img src={image}/>\n                    </View>\n                </div>\n\n            </TouchableOpacity>\n\n        );\n    }\n\n\n    // const styles = StyleSheet.create({ \n    //     container: {\n    //         flex:1,\n    //     width: props.width ,\n    //     height: props.height,\n    //     transform: 'translate3d(' + props.left + 'px,' + props.top + 'px,0)',\n    //     WebkitTransform: 'translate3d(' + props.left + 'px,' + props.top + 'px,0)'\n    // }});"]},"metadata":{},"sourceType":"module"}