{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as audio from \"./audio\";\nimport { React, useState, useRef } from \"react\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, Card } from \"react-native-elements\";\nimport CardFlip from 'react-native-card-flip';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function QuestionCard(props) {\n  var _this = this;\n\n  var _useState = useState({\n    view: 'points',\n    completed: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cardState = _useState2[0],\n      setCardState = _useState2[1];\n\n  var cardRef = useRef();\n\n  var handleClick = function handleClick() {\n    console.log(\"card Pressed\");\n\n    if (cardState.view === 'points') {\n      audio.play(\"flip\");\n      setTimeout(function () {\n        if (cardState.view === \"question\") {\n          audio.play(\"countdown\");\n        }\n      }, 1800);\n      setCardState({\n        view: 'question',\n        flipping: true\n      });\n    } else if (cardState.view === 'question') {\n      audio.stop(\"countdown\");\n      setCardState({\n        view: 'answer'\n      });\n    } else {\n      audio.play(\"flipBack\");\n      setCardState({\n        view: 'points',\n        completed: true,\n        flipping: true\n      });\n    }\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(CardFlip, {\n      style: styles.cardContainer,\n      ref: function ref(card) {\n        return _this.card = cardRef;\n      },\n      children: [_jsx(TouchableOpacity, {\n        activeOpacity: 1,\n        style: [styles.card, styles.card1],\n        onPress: function onPress() {\n          return _this.card.flip();\n        },\n        children: _jsx(Text, {\n          style: styles.label,\n          children: \"AB\"\n        })\n      }), _jsx(TouchableOpacity, {\n        activeOpacity: 1,\n        style: [styles.card, styles.card2],\n        onPress: function onPress() {\n          return _this.card.flip();\n        },\n        children: _jsx(Text, {\n          style: styles.label,\n          children: \"CD\"\n        })\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF'\n  },\n  cardContainer: {\n    width: 320,\n    height: 470\n  },\n  card: {\n    width: 320,\n    height: 470,\n    backgroundColor: '#FE474C',\n    borderRadius: 5,\n    shadowColor: 'rgba(0,0,0,0.5)',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.5\n  },\n  card1: {\n    backgroundColor: '#FE474C'\n  },\n  card2: {\n    backgroundColor: '#FEB12C'\n  },\n  label: {\n    lineHeight: 470,\n    textAlign: 'center',\n    fontSize: 55,\n    fontFamily: 'System',\n    color: '#ffffff',\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["/Users/romaineallen/codeC/ccp2/projects/quiz-react-native/app/components/card.js"],"names":["audio","React","useState","useRef","Button","Card","CardFlip","QuestionCard","props","view","completed","cardState","setCardState","cardRef","handleClick","console","log","play","setTimeout","flipping","stop","styles","container","cardContainer","card","card1","flip","label","card2","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","width","height","borderRadius","shadowColor","shadowOffset","shadowOpacity","lineHeight","textAlign","fontSize","fontFamily","color"],"mappings":"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","sourcesContent":["\nimport * as audio from './audio';\nimport {React, useState, useRef} from \"react\";\nimport { StatusBar, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\nimport { Button,Card } from \"react-native-elements\";\nimport CardFlip from 'react-native-card-flip';\n\nexport default function QuestionCard(props) {\n    const [cardState, setCardState] = useState({view: 'points', completed: false})\n    const cardRef = useRef()\n  \n    const handleClick= () => {\n    console.log(\"card Pressed\");\n    if (cardState.view === 'points') {\n        audio.play(\"flip\");\n        setTimeout(() => {\n            if (cardState.view === \"question\") {\n                audio.play(\"countdown\");\n            }\n        }, 1800);\n        setCardState({view: 'question', flipping: true});\n    } \n    else if (cardState.view === 'question') {\n        audio.stop(\"countdown\");\n        setCardState({view: 'answer'});\n    } else {\n        audio.play(\"flipBack\");\n        setCardState({view: 'points', completed: true, flipping: true});\n    }\n  };\n\n\n\n\n  return (\n    <View style={styles.container}>\n      <CardFlip style={styles.cardContainer} ref={card => (this.card = cardRef)}>\n        <TouchableOpacity\n          activeOpacity={1}\n          style={[styles.card, styles.card1]}\n          onPress={() => this.card.flip()}>\n          <Text style={styles.label}>AB</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          activeOpacity={1}\n          style={[styles.card, styles.card2]}\n          onPress={() => this.card.flip()}>\n          <Text style={styles.label}>CD</Text>\n        </TouchableOpacity>\n      </CardFlip>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: '#F5FCFF',\n    },\n    cardContainer: {\n      width: 320,\n      height: 470,\n    },\n    card: {\n      width: 320,\n      height: 470,\n      backgroundColor: '#FE474C',\n      borderRadius: 5,\n      shadowColor: 'rgba(0,0,0,0.5)',\n      shadowOffset: {\n        width: 0,\n        height: 1,\n      },\n      shadowOpacity: 0.5,\n    },\n    card1: {\n      backgroundColor: '#FE474C',\n    },\n    card2: {\n      backgroundColor: '#FEB12C',\n    },\n    label: {\n      lineHeight: 470,\n      textAlign: 'center',\n      fontSize: 55,\n      fontFamily: 'System',\n      color: '#ffffff',\n      backgroundColor: 'transparent',\n    },\n  });"]},"metadata":{},"sourceType":"module"}