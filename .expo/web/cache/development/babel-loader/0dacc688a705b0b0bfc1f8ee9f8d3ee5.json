{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as audio from \"../components/audio\";\nimport { React, useState, createRef } from \"react\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button } from \"react-native-elements\";\nimport CardFlip from 'react-native-card-flip';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function QuestionScreenCard(props) {\n  var _useState = useState({\n    view: 'points',\n    completed: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cardState = _useState2[0],\n      setCardState = _useState2[1];\n\n  var cardRef = createRef(null);\n\n  var handleClick = function handleClick() {\n    console.log(\"card Pressed\");\n    cardRef.current.flip();\n\n    if (cardState.view === 'points') {\n      audio.play(\"flip\");\n      setTimeout(function () {\n        if (cardState.view === \"question\") {\n          audio.play(\"countdown\");\n        }\n      }, 1800);\n      setCardState({\n        view: 'question',\n        flipping: true\n      });\n    } else if (cardState.view === 'question') {\n      audio.stop(\"countdown\");\n      setCardState({\n        view: 'answer'\n      });\n    } else {\n      audio.play(\"flipBack\");\n      setCardState({\n        view: 'points',\n        completed: true,\n        flipping: true\n      });\n    }\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(CardFlip, {\n      style: styles.cardContainer,\n      ref: function ref(card) {\n        return cardRef.current = card;\n      },\n      children: _jsx(TouchableOpacity, {\n        activeOpacity: 1,\n        style: [styles.card, styles.card1],\n        onPress: handleClick,\n        children: _jsx(Text, {\n          style: styles.label,\n          children: props.question\n        })\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF'\n  },\n  cardContainer: {\n    width: 230,\n    height: 150\n  },\n  card: {\n    width: 230,\n    height: 150,\n    backgroundColor: '#FE474C',\n    borderRadius: 5,\n    shadowColor: 'rgba(0,0,0,0.5)',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.5\n  },\n  card1: {\n    backgroundColor: '#FE474C'\n  },\n  card2: {\n    backgroundColor: '#FEB12C'\n  },\n  label: {\n    lineHeight: 47,\n    textAlign: 'center',\n    fontSize: 15,\n    fontFamily: 'System',\n    color: '#ffffff',\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["/Users/romaineallen/codeC/ccp2/projects/quiz-react-native/app/screens/questionCardScreen.js"],"names":["audio","React","useState","createRef","Button","CardFlip","QuestionScreenCard","props","view","completed","cardState","setCardState","cardRef","handleClick","console","log","current","flip","play","setTimeout","flipping","stop","styles","container","cardContainer","card","card1","label","question","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","width","height","borderRadius","shadowColor","shadowOffset","shadowOpacity","card2","lineHeight","textAlign","fontSize","fontFamily","color"],"mappings":"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","sourcesContent":["\nimport * as audio from '../components/audio';\nimport {React, useState, createRef} from \"react\";\nimport { StatusBar, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\nimport { Button} from \"react-native-elements\";\nimport CardFlip from 'react-native-card-flip';\n\nexport default function QuestionScreenCard(props) {\n    const [cardState, setCardState] = useState({view: 'points', completed: false})\n    const cardRef = createRef(null)\n  \n    const handleClick= () => {\n    console.log(\"card Pressed\");\n    cardRef.current.flip()\n    if (cardState.view === 'points') {\n        audio.play(\"flip\");\n        setTimeout(() => {\n            if (cardState.view === \"question\") {\n                audio.play(\"countdown\");\n            }\n        }, 1800);\n        setCardState({view: 'question', flipping: true});\n    } \n    else if (cardState.view === 'question') {\n        audio.stop(\"countdown\");\n        setCardState({view: 'answer'});\n    } else {\n        audio.play(\"flipBack\");\n        setCardState({view: 'points', completed: true, flipping: true});\n    }\n  };\n\n\n\n\n  return (\n    <View style={styles.container}>\n      <CardFlip style={styles.cardContainer} ref={card => (cardRef.current = card)}>\n        <TouchableOpacity\n          activeOpacity={1}\n          style={[styles.card, styles.card1]}\n          onPress={handleClick}>\n          <Text style={styles.label}>{props.question}</Text>\n        </TouchableOpacity>\n        {/* <TouchableOpacity\n          activeOpacity={1}\n          style={[styles.card, styles.card2]}\n          onPress={handleClick}>\n          <Text style={styles.label}>{props.answer}</Text>\n        </TouchableOpacity> */}\n      </CardFlip>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: '#F5FCFF',\n    },\n    cardContainer: {\n      width: 230,\n      height: 150,\n    },\n    card: {\n      width: 230,\n      height: 150,\n      backgroundColor: '#FE474C',\n      borderRadius: 5,\n      shadowColor: 'rgba(0,0,0,0.5)',\n      shadowOffset: {\n        width: 0,\n        height: 1,\n      },\n      shadowOpacity: 0.5,\n    },\n    card1: {\n      backgroundColor: '#FE474C',\n    },\n    card2: {\n      backgroundColor: '#FEB12C',\n    },\n    label: {\n      lineHeight: 47,\n      textAlign: 'center',\n      fontSize: 15,\n      fontFamily: 'System',\n      color: '#ffffff',\n      backgroundColor: 'transparent',\n    },\n  });"]},"metadata":{},"sourceType":"module"}