{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as audio from \"./audio\";\nimport image from \"../assets/img/react.svg\";\nimport { React, useState, createRef } from \"react\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Card(props) {\n  var _useState = useState({\n    view: 'points',\n    completed: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cardState = _useState2[0],\n      setCardState = _useState2[1];\n\n  var cardRef = createRef(null);\n\n  var _useWindowDimensions = useWindowDimensions(),\n      height = _useWindowDimensions.height,\n      width = _useWindowDimensions.width;\n\n  var handleClick = function handleClick() {\n    console.log(\"card Pressed\");\n  };\n\n  var getLabelBack = function getLabelBack() {\n    var label = cardState.view === 'question' ? _jsx(Text, {\n      children: props.question\n    }) : _jsx(Text, {\n      children: props.answer\n    });\n    return label;\n  };\n\n  var transitionEndHandler = function transitionEndHandler(e) {\n    if (e.propertyName === 'width') {\n      cardState.flipping = false;\n    }\n  };\n\n  var styles = {\n    width: props.width,\n    height: props.height\n  };\n  var front = cardState.completed ? _jsx(\"img\", {\n    src: image\n  }) : _jsx(Text, {\n    style: {\n      fontSize: 40,\n      alignItems: 'center'\n    },\n    nativeIDs: \"points\",\n    children: props.points\n  });\n  var className = 'flipper';\n\n  if (cardState.view !== 'points') {\n    className = className + ' flipped';\n  }\n\n  if (cardState.flipping) {\n    className = className + ' flipping';\n  }\n\n  return _jsx(TouchableOpacity, {\n    nativeID: \"card\",\n    style: {\n      width: props.width,\n      height: props.height\n    },\n    onPress: handleClick,\n    children: _jsxs(View, {\n      children: [_jsx(View, {\n        nativeID: \"front\",\n        children: front\n      }), _jsxs(View, {\n        nativeID: \"back\",\n        children: [getLabelBack, _jsx(\"img\", {\n          src: image\n        })]\n      })]\n    })\n  }, props.keys);\n}","map":{"version":3,"sources":["/Users/romaineallen/codeC/ccp2/projects/quiz-react-native/app/components/Cards.js"],"names":["audio","image","React","useState","createRef","Card","props","view","completed","cardState","setCardState","cardRef","useWindowDimensions","height","width","handleClick","console","log","getLabelBack","label","question","answer","transitionEndHandler","e","propertyName","flipping","styles","front","fontSize","alignItems","points","className","keys"],"mappings":";AAAA,OAAO,KAAKA,KAAZ;AACA,OAAOC,KAAP;AACA,SAAQC,KAAR,EAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;;;;;AAIA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAChC,kBAAkCH,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,SAAS,EAAE;AAA5B,GAAD,CAA1C;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AACA,MAAMC,OAAO,GAAGP,SAAS,CAAC,IAAD,CAAzB;;AACA,6BAA0BQ,mBAAmB,EAA7C;AAAA,MAAQC,MAAR,wBAAQA,MAAR;AAAA,MAAgBC,KAAhB,wBAAgBA,KAAhB;;AAEA,MAAMC,WAAW,GAAE,SAAbA,WAAa,GAAM;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAwBH,GAzBD;;AA2BA,MAAIC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACrB,QAAIC,KAAK,GAAGV,SAAS,CAACF,IAAV,KAAmB,UAAnB,GAAgC,KAAC,IAAD;AAAA,gBAAOD,KAAK,CAACc;AAAb,MAAhC,GAAgE,KAAC,IAAD;AAAA,gBAAOd,KAAK,CAACe;AAAb,MAA5E;AACA,WAAOF,KAAP;AACH,GAHD;;AAKA,MAAIG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,CAAD,EAAO;AAC9B,QAAIA,CAAC,CAACC,YAAF,KAAmB,OAAvB,EAAgC;AAC5Bf,MAAAA,SAAS,CAACgB,QAAV,GAAqB,KAArB;AAEH;AACJ,GALD;;AAOA,MAAIC,MAAM,GAAG;AAACZ,IAAAA,KAAK,EAAER,KAAK,CAACQ,KAAd;AACDD,IAAAA,MAAM,EAAEP,KAAK,CAACO;AADb,GAAb;AAOI,MAAIc,KAAK,GAAGlB,SAAS,CAACD,SAAV,GAAsB;AAAK,IAAA,GAAG,EAAEP;AAAV,IAAtB,GAA2C,KAAC,IAAD;AAAM,IAAA,KAAK,EAAG;AAAC2B,MAAAA,QAAQ,EAAE,EAAX;AAAeC,MAAAA,UAAU,EAAE;AAA3B,KAAd;AAAoD,IAAA,SAAS,EAAC,QAA9D;AAAA,cAAwEvB,KAAK,CAACwB;AAA9E,IAAvD;AACA,MAAIC,SAAS,GAAG,SAAhB;;AAEA,MAAItB,SAAS,CAACF,IAAV,KAAmB,QAAvB,EAAiC;AAC7BwB,IAAAA,SAAS,GAAGA,SAAS,GAAG,UAAxB;AACH;;AACD,MAAItB,SAAS,CAACgB,QAAd,EAAwB;AACpBM,IAAAA,SAAS,GAAGA,SAAS,GAAG,WAAxB;AACH;;AAED,SACG,KAAC,gBAAD;AAAmB,IAAA,QAAQ,EAAC,MAA5B;AAAkC,IAAA,KAAK,EAAG;AAACjB,MAAAA,KAAK,EAAER,KAAK,CAACQ,KAAd;AAAqBD,MAAAA,MAAM,EAAEP,KAAK,CAACO;AAAnC,KAA1C;AAAyG,IAAA,OAAO,EAAEE,WAAlH;AAAA,cACK,MAAC,IAAD;AAAA,iBACI,KAAC,IAAD;AAAM,QAAA,QAAQ,EAAC,OAAf;AAAA,kBACCY;AADD,QADJ,EAII,MAAC,IAAD;AAAM,QAAA,QAAQ,EAAC,MAAf;AAAA,mBACKT,YADL,EAEI;AAAK,UAAA,GAAG,EAAEjB;AAAV,UAFJ;AAAA,QAJJ;AAAA;AADL,KAA6FK,KAAK,CAAC0B,IAAnG,CADH;AAaH","sourcesContent":["import * as audio from './audio';\nimport image from \"../assets/img/react.svg\"\nimport {React, useState, createRef} from \"react\";\nimport { StatusBar, StyleSheet, Text, TouchableOpacity, View, useWindowDimensions  } from \"react-native\";\n\n\nexport default function Card(props) {\n    const [cardState, setCardState] = useState({view: 'points', completed: false})\n    const cardRef = createRef(null)\n    const { height, width } = useWindowDimensions();\n    \n    const handleClick= () => {\n        console.log(\"card Pressed\");\n   \n        // if (cardState.view === 'points') {\n        //     audio.play(\"flip\");\n        //     setTimeout(() => {\n        //         if (cardState.view === \"question\") {\n        //             audio.play(\"countdown\");\n        //         }\n        //     }, 1800);\n        //     cardState.view = 'question'\n        //     cardState.flipping = true\n        //     // setCardState({view: 'question', flipping: true});\n        // } \n        // else if (cardState.view === 'question') {\n        //     audio.stop(\"countdown\");\n        //     cardState.view = 'answer'\n        //     // setCardState({view: 'answer'});\n        // } else {\n        //     audio.play(\"flipBack\");\n        //     cardState.view = 'points'\n        //     cardState.flipping = true\n        //     cardState.completed =true\n        //     // setCardState({view: 'points', completed: true, flipping: true});\n        //  }\n    };\n\n    let getLabelBack = () => {\n        let label = cardState.view === 'question' ? <Text>{props.question}</Text> : <Text>{props.answer}</Text>\n        return label;\n    }\n\n    let transitionEndHandler = (e) => {\n        if (e.propertyName === 'width') {\n            cardState.flipping = false\n            // setCardState({flipping: false});\n        }\n    }\n    //console.log(props)\n    let styles = {width: props.width, \n                height: props.height, \n                // transform:[{translateX:props.left}, {translateY:props.top}]\n            }\n  \n     \n\n        let front = cardState.completed ? <img src={image}/> : <Text style= {{fontSize: 40, alignItems: 'center'}} nativeIDs='points'>{props.points}</Text>;\n        let className = 'flipper';\n\n        if (cardState.view !== 'points') {\n            className = className + ' flipped';\n        }\n        if (cardState.flipping) {\n            className = className + ' flipping';\n        }\n       \n        return (\n           <TouchableOpacity  nativeID='card'style= {{width: props.width, height: props.height, }} key={props.keys} onPress={handleClick}>\n                <View >\n                    <View nativeID='front'>\n                    {front}\n                    </View>\n                    <View nativeID='back'>\n                        {getLabelBack}\n                        <img src={image}/>\n                    </View>\n                </View>\n           </TouchableOpacity>\n        );\n    }\n\n\n    // const styles = StyleSheet.create({ \n    //     container: {\n    //         flex:1,\n    //     width: props.width ,\n    //     height: props.height,\n    //     transform: 'translate3d(' + props.left + 'px,' + props.top + 'px,0)',\n    //     WebkitTransform: 'translate3d(' + props.left + 'px,' + props.top + 'px,0)'\n    // }});"]},"metadata":{},"sourceType":"module"}